
在 Git 中，分支是用来隔离不同的开发线路的一种方式。一个分支基本上是一个独立的“拷贝”，你可以在其中自由地做出修改，
而不会影响其他的分支。当你在一个分支上做出一些修改并提交后，这些修改只存在于那个分支上，其他的分支不会看到这些修改。


你可以使用 git branch 命令来创建新的分支。例如，git branch dev 会创建一个新的分支 dev。
你可以使用 git checkout 命令来在不同的分支之间切换。例如，git checkout dev 会切换到 dev 分支。当你切换分支时，
你的工作目录会更新为那个分支最新提交的状态。
分支是 Git 中一个非常强大的特性，它可以让多人或者一个人在多个功能上并行开发成为可能，并且可以轻松地合并这些开发线路。



在Git中，您可以使用以下命令来显示当前活动的分支：
git branch


两个分支进行合并,最终要合并到那个分支,就先切换到那个分支,切换完成之后,再选择把哪个分支合并到当前分支
git merge dev
相同的行有不同的数据这时候会冲突	

git branch -m命令来重命名当前分支，或者使用git branch -m <oldname> <newname>
如果你已经检出（即，已经切换到）了你想要重命名的分支，你可以使用：
git branch -m <newname>
如果你的分支已经推送到远程仓库，你重命名分支后也需要对应地更新远程仓库。
首先，你需要删除远程旧的分支，然后将新命名的分支推送到远程仓库：
git push origin :old-branch    :前面的空白代表没有本地分支对应到远程的"old-branch"，因此"old-branch"会被删除。
git push -u origin new-branch  -u参数告诉Git去记住你当前的参数，之后可以直接 git pull




选择一个冲突文件，用你最喜欢的文本编辑器打开它。你会看到Git已经修改了文件的内容，把冲突的部分标记出来，看起来像这样：
Copy code
<<<<<<< HEAD
这部分是在你的分支上所做的更改
=======
这部分是在你试图合并的分支上所做的更改
>>>>>>> branch-name


如果你想保留在合并的分支上做的更改，你需要将文件编辑成这样：

这部分是在你试图合并的分支上所做的更改











