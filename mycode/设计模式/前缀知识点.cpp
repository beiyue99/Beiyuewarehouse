聚合(Aggregation)关系表示整体与部分的关系。在聚合关系中, 成员对象是整体的一部分, 但是成员对象可以脱
离整体对象独立存在。在UML中, 聚合关系用带空心菱形的直线表示





组合(Compositio)关系也表示的是一种整体和部分的关系, 但是在组合关系中整体对象可以控制成员对象的生命
周期, 一旦整体对象不存在, 成员对象也不存在, 整体对象和成员对象之间具有同生共死的关系。
在UML中组合关系用带实心菱形的直线表示
比如有几个类： 树叶，树枝，树干
在树类的构造函数分别把他们new出来，当树析构时，把他们都delete掉，此时就是组合关系




依赖(Dependency)关系是一种使用关系, 特定事物的改变有可能会影响到使用该事物的其他事物, 在需要表示一
个事物使用另一个事物时使用依赖关系, 大多数情况下依赖关系体现在某个类的方法便用另一个类的对象作为参数。
在UML中, 依赖关系用带箭头的虚线表示, 由依赖的一方指向被依赖的一方









关于依赖倒转原则, 对应的是两条非常抽象的描述:
1.高层模块不应该依赖低层模块, 两个都应该依赖抽象
2.抽象不应该依赖细节, 细节应该依赖抽像   //比如，两个细节动作应该依赖于抽象动作类
先用人话解释一下这两句话中的一些抽象概念 :
。高层模块:可以理解为上层应用, 就是业务层的实现
。低层模块 : 可以理解为底层接口, 比如封装好的APL、动态库等
抽象 : 指的就是抽象类或者接口, 在C++中没有接口, 只有抽象类









































































